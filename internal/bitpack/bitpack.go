package bitpack

// This code is generated by github.com/parsyl/parquet.

func Pack(width int, vals []int64) []byte {
	switch width {
	case 1:
		return pack1(vals)
	case 2:
		return pack2(vals)
	case 3:
		return pack3(vals)
	default:
		return []byte{}
	}
}

func pack1(vals []int64) []byte {
	return []byte{
		(byte((vals[0]&1)<<0) |
			byte((vals[1]&1)<<1) |
			byte((vals[2]&1)<<2) |
			byte((vals[3]&1)<<3) |
			byte((vals[4]&1)<<4) |
			byte((vals[5]&1)<<5) |
			byte((vals[6]&1)<<6) |
			byte((vals[7]&1)<<7)),
	}
}

func pack2(vals []int64) []byte {
	return []byte{
		(byte((vals[0]&3)<<0) |
			byte((vals[1]&3)<<2) |
			byte((vals[2]&3)<<4) |
			byte((vals[3]&3)<<6)),
		(byte((vals[4]&3)<<0) |
			byte((vals[5]&3)<<2) |
			byte((vals[6]&3)<<4) |
			byte((vals[7]&3)<<6)),
	}
}

func pack3(vals []int64) []byte {
	return []byte{
		(byte((vals[0]&7)<<0) |
			byte((vals[1]&7)<<3) |
			byte((vals[2]&3)<<6)),
		(byte((vals[2]&4)>>2) |
			byte((vals[3]&7)<<1) |
			byte((vals[4]&7)<<4) |
			byte((vals[5]&1)<<7)),
		(byte((vals[5]&6)>>1) |
			byte((vals[6]&7)<<2) |
			byte((vals[7]&7)<<5)),
	}
}

func Unpack(width int, vals []byte) []int64 {
	switch width {
	case 1:
		return unpack1(vals)
	case 2:
		return unpack2(vals)
	case 3:
		return unpack3(vals)
	default:
		return []int64{}
	}
}

func unpack1(vals []byte) []int64 {
	return []int64{
		(int64(vals[0]&1) >> 0),
		(int64(vals[0]&2) >> 1),
		(int64(vals[0]&4) >> 2),
		(int64(vals[0]&8) >> 3),
		(int64(vals[0]&16) >> 4),
		(int64(vals[0]&32) >> 5),
		(int64(vals[0]&64) >> 6),
		(int64(vals[0]&128) >> 7),
	}
}

func unpack2(vals []byte) []int64 {
	return []int64{
		(int64(vals[0]&3) >> 0),
		(int64(vals[0]&12) >> 2),
		(int64(vals[0]&48) >> 4),
		(int64(vals[0]&192) >> 6),
		(int64(vals[1]&3) >> 0),
		(int64(vals[1]&12) >> 2),
		(int64(vals[1]&48) >> 4),
		(int64(vals[1]&192) >> 6),
	}
}

func unpack3(vals []byte) []int64 {
	return []int64{
		(int64(vals[0]&7) >> 0),
		(int64(vals[0]&56) >> 3),
		(int64(vals[0]&192) >> 6) | (int64(vals[1]&1) << 2),
		(int64(vals[1]&14) >> 1),
		(int64(vals[1]&112) >> 4),
		(int64(vals[1]&128) >> 7) | (int64(vals[2]&3) << 1),
		(int64(vals[2]&28) >> 2),
		(int64(vals[2]&224) >> 5),
	}
}
